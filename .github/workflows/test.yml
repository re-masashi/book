name: Test and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

jobs:
  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: cargo fmt --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install LLVM 18
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18

      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1  

        with:
          toolchain: stable
      - name: Clippy
        run: rustup component add clippy && cargo clippy -- -D warnings
      - name: Build
        run: cargo build --release
      - name: Test
        run: cargo test --release
      - uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: target/release

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set Date Env
        id: date
        run: echo "DATE_TAG=nightly-$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Download Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifact
          path: ./release

      - name: Create Nightly Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.DATE_TAG }}
          release_name: Nightly Build ${{ env.DATE_TAG }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/lyronc  
          asset_name: lyronc            
          asset_content_type: application/octet-stream

      - name: Zip Binary
        run: |
          cd release
          zip lyronc-${{ env.DATE_TAG }}.zip lyronc
