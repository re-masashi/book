# use "examples/example_struct.bk"
use "examples/math.bk"

extern run_socket_server(int, int, ptr,) -> int

struct Response
	resp str
	close int
end

struct Vec<T>
	val Array<T>
	len int
	capacity int
end

def newvec(val)
	Vec(array(16, val), 16, 32)

def count_to_1B(n: int) -> int
	if n < 1_000_000_000 then
		count_to_1B(n+1)

def handler(req: str) -> Response do
	print("OK\n")
	if req == "exit\n" then do
		println("closing client connection")
		Response(">", 1)
	end else do
		println("replying")
		Response(">", 0)
	end
end

# run_socket_server(0, 8000, handler)

# return 0 ## return on top level to exit the program. shall i add it?

# println(type("abcd"))
# println(type(11))

# let list: Array<int> = array(4, 0)
# list[0] = 21
# list[1] = 21
# list[2] = 21
# list[3] = 21
# push(list, 4, 4, 200)
# push(list, 5, 8, 200)

# count_to_1B(1)